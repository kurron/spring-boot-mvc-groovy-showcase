apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// expand Gradle properties into the Spring configuration
processResources {
    // restrict the copy to the configuration file otherwise you end up having issues copying other resources
    filesMatching( '**/application.yml' ) {
        expand( project.properties )
    }
}

// automatically create a META-INF/build-info.properties file -- may increase build times.  See documentation for details.
springBoot {
    buildInfo()
}

dependencies {
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
/*
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-neo4j')
	compile('org.springframework.boot:spring-boot-starter-data-redis')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-starter-security')
*/
    compile('org.springframework.boot:spring-boot-starter-web')
    /*
    compile('org.liquibase:liquibase-core')
    compile('org.springframework.cloud:spring-cloud-starter-aws')
    compile('org.springframework.cloud:spring-cloud-starter-aws-jdbc')
    compile('org.springframework.cloud:spring-cloud-starter-aws-messaging')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-consul-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-turbine-stream')
    compile('org.springframework.cloud:spring-cloud-starter-vault-config')
    compile('org.springframework.retry:spring-retry')
    compile('org.springframework.session:spring-session-data-redis')
    compile('org.springframework.statemachine:spring-statemachine-starter')
    */

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.cloud:spring-cloud-contract-wiremock')
    testCompile('org.springframework.cloud:spring-cloud-starter-contract-stub-runner') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile('org.springframework.cloud:spring-cloud-starter-contract-verifier') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.springframework.security:spring-security-test')

    runtime('io.micrometer:micrometer-registry-prometheus')
    runtime('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    runtime('org.hsqldb:hsqldb')
    // JMX over HTTP does not appear to be that useful
    // runtime('org.jolokia:jolokia-core')
}

ext {
    snippetsDir = file( 'build/generated-snippets' )
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn documentationTests
}

// the example from the documentation isn't working for me.  I have to modify the bootJar task instead.
// the trade-off is that when using ./gradlew bootRun, the API documentation is not available for
// reason.
bootJar {
    dependsOn asciidoctor
    from ( "${asciidoctor.outputDir}/html5" ) {
        into 'BOOT-INF/classes/static/'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.statemachine:spring-statemachine-bom:${springStatemachineVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}